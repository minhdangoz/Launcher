apply plugin: 'com.android.library'

android {
    compileSdkVersion 21
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    repositories {
        maven { url 'http://192.168.1.220:8081/nexus/content/groups/public/' }
        mavenCentral()
    }
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    compile files('src/main/libs/fastjson-1.1.43.android.jar')
}

/**
 * Javadoc
 */
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        title = "Documentation for Android $android.defaultConfig.versionName b$android.defaultConfig.versionCode"
        destinationDir = new File("${project.getProjectDir()}/build/docs/javadoc/")
        source = variant.javaCompile.source

        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        description "Generates Javadoc for $variant.name."

        options.memberLevel = JavadocMemberLevel.PRIVATE
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.links("http://developer.android.com/reference/reference/");
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

apply plugin: 'maven'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        options.charSet = 'UTF-8'
        options.encoding = 'UTF-8'
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        allprojects {
            tasks.withType(Javadoc) {
                options.encoding = "UTF-8"
            }
        }
//        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }
    task runtimeJar(dependsOn: ['compileReleaseJava'], type: Jar) {
        classifier = 'runtime'

        //后缀名
        extension = "jar"
        //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
//        archiveName = "AndroidJarDemo.jar"

        //需打包的资源所在的路径集
        def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
        //初始化资源路径集
        from srcClassDir

        //去除路径集下部分的资源
        exclude "com/biddingos/android/BuildConfig.class"
        exclude "com/biddingos/android/BuildConfig\$*.class"
        exclude "**/R.class"
        exclude "**/R\$*.class"

        //只导入资源路径集下的部分资源
//        include "org/chaos/demo/jar/**/*.class"
    }
    artifacts {
        archives androidSourcesJar
        archives runtimeJar
        archives androidJavadocsJar
    }
}
